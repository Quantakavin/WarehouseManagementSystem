/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
  nodes: {
    Cube024: THREE.Mesh
  }
  materials: {}
}

interface ModelProps {
  areaid: string;
  binid: string;
  sectionid: string;
  levelid: string;

  position: [x: number, y:  number, z: number];
}

const Model: React.FC<ModelProps> = ({areaid, binid, sectionid, levelid, position}) => {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF('/box.glb') as GLTFResult
  const bintag = areaid + "-" + levelid + "-" + sectionid + "-" + levelid;
  return (
    <group onClick={() => {alert(bintag)}} ref={group} dispose={null} position={position} scale={[2.5, 2.5, 2.5]}>
      <mesh geometry={nodes.Cube024.geometry} material={nodes.Cube024.material} position={[-1.42, 0.55, -3.13]} scale={[0.85, 0.29, 0.51]} />
    </group>
  )
}

useGLTF.preload('/box.glb')

export default Model;