/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import axios from "axios";
import React, { useEffect, useRef, useState } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import config from "../../config/config";
// import { color } from "@mui/system";

type GLTFResult = GLTF & {
  nodes: {
    Cube024: THREE.Mesh;
  };
  materials: {};
};

interface ModelProps {
  areatag: string;
  racktag: string;
  leveltag: string;
  sectiontag: string;

  position: [x: number, y: number, z: number];
}

const Model: React.FC<ModelProps> = ({
  areatag,
  racktag,
  leveltag,
  sectiontag,
  position,
}) => {
  const group = useRef<THREE.Group>();
  const [BinsData, setBinsData ] = useState<string>(null);
  const [isSelected, setIsSelected] = useState<boolean>(false);
  const { nodes, materials } = useGLTF("/box.glb") as GLTFResult;
  const bintag = `${areatag}${racktag}${leveltag}${sectiontag}`
  


  // Get Bin Information
  // function Bins () {
  //   const [BinsData, setBinsData ] = useState([]);

  //   const getBinsData = async () => {
  //     const response = await axios.get(`${config.baseURL}/bintag/${bintag}`);

  //     setBinsData(response.data); 
  //   };



  // }

  useEffect(() => {
    axios
    .get(`${config.baseURL}/bintag/${bintag}`).then((data) => {
      setBinsData(data.data[0]) 
    });
  }, []);
  


  return (
    <group
      onClick={() => {
        alert(JSON.stringify(BinsData));
      }}
      onPointerOver={()=> setIsSelected(true)}
      onPointerOut={()=> setIsSelected(false)}
      ref={group}
      dispose={null}
      position={position}
      scale={[2.5, 2.5, 2.5]}
    >
      <mesh
        geometry={nodes.Cube024.geometry}
        material={nodes.Cube024.material}
        position={[-1.42, 0.55, -3.13]}
        scale={[0.85, 0.29, 0.51]}
      >
      <meshStandardMaterial color={ isSelected? '#8b0000' : 'gray' } />
      </mesh>
    </group>
  );
};

useGLTF.preload("/box.glb");

export default Model;
