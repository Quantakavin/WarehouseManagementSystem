/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { Html, useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import axios from "axios";
import config from "../../config/config";

type GLTFResult = GLTF & {
  nodes: {
    CrateB022_CrateB_lp_0: THREE.Mesh;
  };
  materials: {
    CrateB_lp: THREE.MeshStandardMaterial;
  };
};

interface ModelProps {
  areatag: string;
  racktag: string;
  leveltag: string;
  sectiontag: string;

  position: [x: number, y: number, z: number];
}

const Model: React.FC<ModelProps> = ({
  areatag,
  racktag,
  leveltag,
  sectiontag,
  position,
}) => {
  const group = useRef<THREE.Group>();
  const [BinsData, setBinsData] = useState<any>(null);
  const [isSelected, setIsSelected] = useState<boolean>(false);
  const { nodes, materials } = useGLTF("/newbox.glb") as GLTFResult;
  const [CurrentBinID, setCurrentBinID] = useState([]);
  const bintag = `${areatag}${racktag}${leveltag}${sectiontag}`;

  useEffect(() => {
    axios.get(`${config.baseURL}/bintag/${bintag}`).then((data) => {
      setBinsData(data.data[0]);
    });
  }, []);

  return (
    <group
      onClick={() => {
        alert(JSON.stringify(BinsData));
      }}
      onPointerOver={() => setIsSelected(true)}
      onPointerOut={() => setIsSelected(false)}
      ref={group}
      dispose={null}
      position={position}
      scale={[2.5, 2.5, 2.5]}
    >
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <group position={[0, 0, 744.07]}>
            <mesh
              geometry={nodes.CrateB022_CrateB_lp_0.geometry}
              material={materials.CrateB_lp}
              position={[-982.05, 0, 0]}
            >
              {isSelected ? (
                <Html distanceFactor={10}>
                  <div className="content">
                    BinTag:{BinsData.BinTag}
                    <br />
                    Column: {sectiontag}
                    <br />
                    Rack: {racktag}
                    <br />
                    Level: {leveltag}
                    <br />
                    Capacity:{BinsData.Volume} cm3
                    <br />
                    Amount of Items:
                    <br />
                  </div>
                </Html>
              ) : null}
            </mesh>
          </group>
        </group>
      </group>
    </group>
  );
};

useGLTF.preload("/newbox.glb");

export default Model;
